function plotallMP(STUDY, rName, rFolder, mName, varargin)

% rName             Name of the report. Also will be the name of the folder
%                   under which the report and all of the images will be
%                   saved
% rFolder           File path, location where the rName folder will be stored
% mName             Measure name (ERSP, ERP, etc.)
% ----------------------------------------------------------------------------
% Optional arguments:
% domains           Specifies which domains to generate a report for, as an array.
%                   Default value is all domains.
% sections          Specifies which figures to include in the report.
%                   Default value is all figures.

inputOptions = finputcheck(varargin, ...
    { ...
    'domains'   'real'  []  1:length(STUDY.measureProjection.(mName).projection.domain);
    'sections'  'string' {'all','core'} 'all'; ...
    });

if ischar(inputOptions)
    error(inputOptions);
end;

reportName = rName;

reportFolder = [rFolder reportName filesep];
% imagesAndFiguresFolderName = 'Images & Figs';
% reportImagesAndFiguresFolderName = [reportFolder filesep imagesAndFiguresFolderName filesep];
% imageExtensions = {'png' 'fig'};

clear autoReport functions

autoReport = pr.report(reportName, reportFolder, 'html');

try
    
    autoReport.addSection(['MPT Report for ' reportName] );
    autoReport.addText(['Auto-generated by Measure Projection toolbox (MPT) on ' date '.' '<br>']);
    autoReport.addText(['Study file: ' STUDY.filename ' located under ' STUDY.filepath ' folder.']);
    
    % The generated report can be modified by including the following tags
    % in the reportPlot variable:
    %   coloredByDomain             Plots an overview of all the domains
    %   volume                      Plots the volume of each domain,
    %                               separately. Volumes are colored by
    %                               anatomy
    %   conditiondifference         Specific to rhythm study only. Displays
    %                               condition differences for the measure.
    %                               Can be modified for use with other
    %                               studies
    %   brodmannareas               Inserts a list of the corresponding
    %                               Brodmann areas for each domain, along
    %                               with the probabilities
    %   dipole                      Plots the highest contributing dipoles
    %                               for each domain
    %   measure                     Inserts a plot of the measure (ERSP,
    %                               ERP, etc.)
    %   meanScalpmap                Inserts the average scalpmap, weighted
    %                               by dipole mass contributions to the
    %                               domain
    %   scalpmap                    Insert the highest contributing
    %                               scalpmaps, sorted by the dipole mass
    %                               contributions to the domain.
    
    if strcmpi(inputOptions.sections, 'core')
        reportPlot = {'coloredByDomain' 'volume' 'conditiondifference' 'brodmannareas'};
    else
%         reportPlot = {'coloredByDomain' 'volume' 'conditiondifference' 'brodmannareas' 'dipole' 'measure' 'meanScalpmap' 'scalpmap'};
        reportPlot = {'coloredByDomain' 'volume' 'conditiondifference' 'brodmannareas' 'dipole' 'meanScalpmap' 'scalpmap'};
    end;

    measureName = mName;
    
    bulletList = {};
    bulletList{1} = [upper(measureName) ' Significance = ' num2str(STUDY.measureProjection.option.([measureName 'Significance']))];
    if STUDY.measureProjection.option.([measureName 'FdrCorrection'])
        bulletList{1} = [bulletList{1} ' (corrected with FDR, final location significance threshold = ' num2str(STUDY.measureProjection.(measureName).projection.significanceLevelForDomain) ')'];
    end;
    
    bulletList{2} = [upper(measureName) ' Exemplar Maximum Similarity Threshold = ' num2str(STUDY.measureProjection.option.([measureName 'MaxCorrelation'])) ' correlation'];
    
    autoReport.addBulletList(bulletList, 'Projection and Domain Creation Parameters:');
    
    if ismember('coloredByDomain', reportPlot)
        autoReport.addSection('All Domains');
        autoReport.addText('Volume colored by domains (colors are based on multi-dimensional scaling of domain exemplars); ');
        imageFilenameWithoutExtension = ['significant_volume_colored_by_domains'];
        
        hiddenFigure = figure('visible', 'off');
        STUDY.measureProjection.(measureName).projection.plotVolumeColoredByDomain('newFigure', false);
        
        autoReport.insertFigureAndSaveWithAllExtensions(hiddenFigure, imageFilenameWithoutExtension);
    end;
    
    autoReport.addPageBreak();
    
    for domainNumber = inputOptions.domains
        
        domainLabel = [upper(measureName) ' ' STUDY.measureProjection.(measureName).projection.domain(domainNumber).label];
        autoReport.addSection(domainLabel);
        
        domainFileName = strrep(domainLabel, ' ', '_');
        
        %% domain scalp-maps
        if ismember('scalpmap', reportPlot)
            autoReport.addText('Highest contributing scalpmaps, sorted by the amount of dipole mass contributed to the Domain (only at most 100 ICs with greater than 5% of their mass inside domain are displayed):');
            % image path and file but without extension
            imageFilenameWithoutExtension = [domainFileName '_scalpmap'];
        
            hiddenFigure = figure('visible', 'off','Position', [0 0 746 400]);
            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotScalpMap('createNewFigure', false, 'weighting', 'mass');
        
            autoReport.insertFigureAndSaveWithAllExtensions(hiddenFigure, imageFilenameWithoutExtension);
        end;
        %% domain mean scalp-maps
        if ismember('meanScalpmap', reportPlot)
            autoReport.addText('Average scalpmap (weighted by dipole mass contributions to Domain):');
            % image path and file but without extension
            imageFilenameWithoutExtension = [domainFileName '_mean_scalpmap'];
        
            hiddenFigure = figure('visible', 'off','Position', [0 0 746 400]);
            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotMeanScalpMap('newFigure', false);
        
            autoReport.insertFigureAndSaveWithAllExtensions(hiddenFigure, imageFilenameWithoutExtension);
        end;
        autoReport.addPageBreak();
        %% domain measure
        if ismember('measure', reportPlot)
            autoReport.addText('Measure: ');
            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotMeasure;
            imageFilenameWithoutExtension = [domainFileName '_measure'];
            autoReport.insertFigureAndSaveWithAllExtensions(gcf, imageFilenameWithoutExtension);
        end;
        %% domain condition differences
        if ismember('conditiondifference', reportPlot)
            autoReport.addText('Condition Differences:');
            
            condition1 = {'133' '233'};
            condition2 = {'233' '144'};
            condition3 = {'144' '244'};
            condition4 = {'244' '133'};
            
            imageFilenameWithoutExtension = [domainFileName '_condition_difference1'];

            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotConditionDifference(STUDY.measureProjection.(measureName).object, 'significanceLevel', 0.05, 'twoConditionLabels', condition1);
            set(gcf,'Position',[0 0 630 200]);
            autoReport.insertFigureAndSaveWithAllExtensions(gcf, imageFilenameWithoutExtension);
            
            imageFilenameWithoutExtension = [domainFileName '_condition_difference2'];
            
            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotConditionDifference(STUDY.measureProjection.(measureName).object, 'significanceLevel', 0.05, 'twoConditionLabels', condition2);
            set(gcf,'Position',[0 0 630 200]);
            autoReport.insertFigureAndSaveWithAllExtensions(gcf, imageFilenameWithoutExtension);
            
            imageFilenameWithoutExtension = [domainFileName '_condition_difference3'];

            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotConditionDifference(STUDY.measureProjection.(measureName).object, 'significanceLevel', 0.05, 'twoConditionLabels', condition3);
            set(gcf,'Position',[0 0 630 200]);
            autoReport.insertFigureAndSaveWithAllExtensions(gcf, imageFilenameWithoutExtension);
            
            imageFilenameWithoutExtension = [domainFileName '_condition_difference4'];

            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotConditionDifference(STUDY.measureProjection.(measureName).object, 'significanceLevel', 0.05, 'twoConditionLabels', condition4);
            set(gcf,'Position',[0 0 630 200]);
            autoReport.insertFigureAndSaveWithAllExtensions(gcf, imageFilenameWithoutExtension);
        end;
        autoReport.addPageBreak();
        %% domain volume
        if ismember('volume', reportPlot)
            autoReport.addText('Volume colored by anatomy: ');
            
            imageFilenameWithoutExtension = [domainFileName '_volume'];
            
            hiddenFigure = figure('visible', 'off', 'Position', [0 0 500 300]);
            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotVolumeColoredByAnatomy(0.05, false);
            
            autoReport.insertFigureAndSaveWithAllExtensions(hiddenFigure, imageFilenameWithoutExtension);
        end;
        %% domain dipoles
        if ismember('dipole', reportPlot)
            autoReport.addText('Highest contributing dipoles (greater than 0.05 of dipole mass contributed to Domain), colored by the (correlation) similarity of their activity to Domain exemplar:');
            % image path and file but without extension
            imageFilenameWithoutExtension = [domainFileName '_dipole'];

            STUDY.measureProjection.(measureName).projection.domain(domainNumber).plotDipole( STUDY.measureProjection.(measureName).object, [1 0.05], 0.1, 'g', false);

            autoReport.insertFigureAndSaveWithAllExtensions(hiddenFigure, imageFilenameWithoutExtension);
        end;
        %% Brodmann areas
        if ismember('brodmannareas', reportPlot)
            %autoReport.addText('Brodmann Areas:');
            
            [ba1, ba2, ba3] = STUDY.measureProjection.(measureName).projection.domain(domainNumber).getBrodmannArea();
            
            BAbulletlist = {};
            
            for i = 1:length(ba1)
                BAbulletlist{i} = ['BA ' num2str(ba1(i)) ' (' num2str(ba2(i)) ') ' ba3{i,1}]; 
            end;
            
            autoReport.addBulletList(BAbulletlist, 'Brodmann Areas & Corresponding Probabilities');
        end;
        autoReport.addPageBreak();
    end;

autoReport.finalize;

catch err
    fprintf('Report generation has encountered the %s error and stopped. \n', err.message);
    autoReport.updateLogIfActive;
end;


